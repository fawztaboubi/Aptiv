package com.EnicarthageClubs.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.EnicarthageClubs.model.Club;
import com.EnicarthageClubs.service.clubService;

@RestController
public class actionPlanController {

	@Autowired
	actionPlanService ActionPlanService;

	@RequestMapping(value = "/checkAllActionPlans/{id}", method = RequestMethod.GET)
	public @ResponseBody Optional<ActionPlan> getAllActionPlans(@PathVariable Long id) {
		return ActionPlanService.getById(id);
	}

	//@RequestMapping(value = "/clubByName/{name}", method = RequestMethod.GET)
	//public List<Club> getClubByName(@PathVariable String Name) {
		//return ClubService.findByName(Name);
	//}

	@RequestMapping(value = "/checkThisActionPlan", method = RequestMethod.GET)
	public List<ActionPlan> getAll() {
		return ActionPlanService.getAllActionPlans();
	}
	//updated version
	@GetMapping(value="/actionPlans")
    public ResponseEntity<List<ActionPlan> > getactionPlans() {

        if (ActionPlanService.getAllActionPlans().isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        }
        return new ResponseEntity<>(ActionPlanService.getAllActionPlans(), HttpStatus.OK);
    }

	@RequestMapping(value = "/deleteActionPlan/{id}", method = RequestMethod.DELETE)
	public HttpStatus deleteActionPlan(@PathVariable int id) {
		ActionPlanService.deleteActionPlan(Long.valueOf(id));
		return HttpStatus.NO_CONTENT;
	}

	@RequestMapping(value = "/insertingActionPlan", method = RequestMethod.POST)
	public HttpStatus insertActionPlan(@RequestBody ActionPlan actionPlan) {
	    
		return ActionPlanService.addActionPlan(club) ? HttpStatus.CREATED : HttpStatus.BAD_REQUEST;
	}

	@RequestMapping(value = "/updatingActionPlan", method = RequestMethod.PUT)
	public HttpStatus updateActionPlan(@RequestBody ActionPlan actionPlan) {
		return ActionPlanService.updateActionPlan(actionPlan) ? HttpStatus.ACCEPTED : HttpStatus.BAD_REQUEST;
	}
}